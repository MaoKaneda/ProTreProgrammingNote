# FirstApp作成手順
# ======================

## 1. アプリケーションの新規作成手順
### 目的: 
新しいRailsアプリケーションを作成し、データを保存するためのデータベースを準備します。​

### 手順:

#### Railsアプリケーションの新規作成

1. パソコンのターミナル（コマンドを入力する画面）を開きます。​

2. 以下のコマンドを入力して、新しいアプリケーションを作成します。​

```ruby
# このコマンドは「Railsで新しいアプリを作ってね」という命令です
rails new アプリ名
```

例えば、アプリ名をFirstAppとする場合：

```ruby
# FirstAppという名前の新しいアプリを作ります
# これは本棚を一から作るようなものです
rails new FirstApp
```

> このコマンドを実行すると、FirstAppという名前のフォルダが作成され、その中に必要なファイルやフォルダが自動的に用意されます。
> フォルダの中には、Webサイトを動かすために必要な「部品」がたくさん入っています。

#### データベースの作成

1. ターミナルで、先ほど作成したアプリケーションのフォルダに移動します。​

```bash
# 作ったFirstAppというフォルダの中に入る命令です
cd FirstApp
```

2. 以下のコマンドを入力して、データベースを作成します。​

```ruby
# データベース（情報を保存する場所）を作る命令です
# これは本を入れる本棚を用意するようなものです
rails db:create
```

> これにより、データを保存・管理するためのデータベースが作成されます。
> データベースは、投稿や写真など、アプリで使う情報を保存しておく場所です。

## 2. 一覧機能（indexアクション）を実装する手順
### 目的: 
保存されたデータの一覧を表示する機能を作成します。​

### 手順:

#### モデルの作成

1. ターミナルで以下のコマンドを入力し、データの構造を定義する「モデル」を作成します。​

```ruby
# モデルを作る命令です。モデルとは「データの入れ物」のことです
# Post（投稿）というモデルを作り、titleとcontentという情報を入れられるようにします
# ・title:string → タイトルを文字列（短い文章）として保存
# ・content:text → 内容を長い文章として保存
rails generate model Post title:string content:text
```

> これにより、タイトル（title）と内容（content）を持つ投稿（Post）というデータの型が作成されます。
> モデルは、「本のカテゴリー」のようなもので、どんな情報をどのように保存するか決めるものです。

#### データベースへの反映

1. 以下のコマンドを入力して、作成したモデルの情報をデータベースに反映させます。​

```ruby
# モデルの設計図をもとに、実際のデータベースを変更する命令です
# 「本棚に新しい棚を追加する」ようなイメージです
rails db:migrate
```

> これで、データベースに「posts」という名前のテーブルが作成され、投稿を保存できるようになります。
> テーブルとは、データを表形式で保存する場所です。

#### コントローラーの作成

1. 以下のコマンドを入力して、投稿を操作するための「コントローラー」を作成します。​

```ruby
# コントローラーを作る命令です
# コントローラーは「データを操作する係」のようなものです
# 図書館の司書さんが本の出し入れを管理するようなイメージです
rails generate controller Posts
```

#### ルーティングの設定

1. アプリケーションのconfig/routes.rbファイルを開き、以下の1行を追加します。​

```ruby
# この1行で、投稿に関するすべての基本機能を使えるようにします
# 「本の貸出・返却・検索」などのルールを一度に決めるようなものです
resources :posts
```

> これにより、投稿に関するURL（例えば、一覧表示や詳細表示など）が自動的に設定されます。
> ルーティングは「どのURLにアクセスしたら、どの機能を使えるか」を決めるものです。

#### indexアクションの定義

1. app/controllers/posts_controller.rbファイルを開き、以下のコードを追加します。​

```ruby
# indexアクションは「一覧を表示する」ための機能です
# @postsという特別な入れ物に、すべての投稿を入れています
def index
  @posts = Post.all  # すべての投稿データを取得
end
```

> これで、すべての投稿を取得して@postsという変数に入れる処理が定義されます。
> @から始まる変数は、画面（ビュー）でも使える特別な変数です。

#### ビューの作成

1. app/views/postsフォルダ内にindex.html.erbというファイルを作成し、以下のコードを記述します。​

```erb
<!-- 「投稿一覧」という見出しを表示 -->
<h1>投稿一覧</h1>

<!-- @postsの中の投稿を1つずつ取り出して表示します -->
<!-- eachは「それぞれの」という意味で、繰り返し処理をします -->
<% @posts.each do |post| %>
  <div>
    <!-- 投稿のタイトルを見出しとして表示 -->
    <h2><%= post.title %></h2>
    <!-- 投稿の内容を段落として表示 -->
    <p><%= post.content %></p>
  </div>
<% end %>
```

> これにより、すべての投稿のタイトルと内容が一覧表示されます。
> ビューは「ユーザーに見せる画面」を作るためのものです。

## 3. 投稿画面（newアクション）を作成する手順
### 目的: 
新しい投稿を作成するための画面を用意します。​

### 手順:

#### newアクションの定義

1. app/controllers/posts_controller.rbファイルを開き、以下のコードを追加します。​

```ruby
# newアクションは「新しい投稿を作る画面を表示する」機能です
def new
  @post = Post.new  # 空の投稿を用意する
end
```

> これで、新しい投稿を作成するための準備が整います。
> 空の投稿を用意することで、ユーザーが内容を入力できるようになります。

#### ビューの作成

1. app/views/postsフォルダ内にnew.html.erbというファイルを作成し、以下のコードを記述します。​

```erb
<!-- 「新しい投稿」という見出しを表示 -->
<h1>新しい投稿</h1>

<!-- 投稿を作成するためのフォームを作ります -->
<!-- form_withはフォームを簡単に作るための便利な機能です -->
<%= form_with model: @post, local: true do |form| %>
  <div>
    <!-- タイトルの入力欄のラベル（名前）と入力ボックスを表示 -->
    <%= form.label :title, "タイトル" %>
    <%= form.text_field :title %>
  </div>
  <div>
    <!-- 内容の入力欄のラベル（名前）と入力ボックスを表示 -->
    <%= form.label :content, "内容" %>
    <%= form.text_area :content %>
  </div>
  <div>
    <!-- フォームを送信するボタンを表示 -->
    <%= form.submit "投稿する" %>
  </div>
<% end %>
```

## 4. 投稿を保存する機能（createアクション）を追加しよう

_※ここからは追加の説明です。上記の手順に続けて実装してみましょう_

#### createアクションの定義

1. app/controllers/posts_controller.rbファイルを開き、以下のコードを追加します。​

```ruby
# createアクションは「フォームから送られた情報を保存する」機能です
def create
  # フォームからの情報を使って新しい投稿を作ります
  @post = Post.new(post_params)
  
  # 保存に成功したら投稿一覧ページに移動、失敗したら入力画面に戻ります
  if @post.save
    redirect_to posts_path, notice: '投稿を作成しました！'
  else
    render :new
  end
end

# プライベートメソッド（このコントローラーの中だけで使える特別な関数）
private

# 安全に投稿データを取得するためのメソッド
# これは「入力チェック」のようなもので、悪意のあるデータを防ぎます
def post_params
  params.require(:post).permit(:title, :content)
end
```

> これで、投稿フォームから送信された情報をデータベースに保存できるようになります。
> また、投稿に成功したら一覧ページに移動し、失敗したら再度入力画面を表示します。